# basic {{{

[[plugins]]
repo = 'Shougo/dein.vim'# {{{
hook_add = '''

    nnoremap <SID>[plugin]      <Nop>
    nmap     <Space>            <SID>[plugin]

'''
# }}}

[[plugins]]
repo = 'Shougo/deoplete.nvim' # {{{
if = '''has('nvim')'''
hook_add = '''
    let g:deoplete#enable_at_startup = 1
'''
# }}}

[[plugins]]
repo = 'Shougo/neocomplete.vim' # {{{
if = '''has('lua')'''
hook_add = '''

    let g:neocomplete#enable_at_startup                 = 1         " use neocomplete.
    let g:neocomplete#enable_smart_case                 = 1         " use smartcase.
    let g:neocomplete#enable_camel_case                 = 1         " use camelcase.
    let g:neocomplete#enable_fuzzy_completion           = 1         " use fuzzy completion.
    let g:neocomplete#use_vimproc                       = 1
    let g:neocomplete#lock_iminsert                     = 1         "
    let g:neocomplete#sources#syntax#min_keyword_length = 2
    let g:neocomplete#lock_buffer_name_pattern          = '\*ku\*'  " file name to lock buffer

    " define dictionary.
    let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : '',
        \ 'vimshell' : $home.'/.vimshell_hist',
        \ 'scheme' : $home.'/.gosh_completions'
        \ }

    " define keyword.
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    " enable omni completion.
    autocmd vimrc filetype css           setlocal omnifunc=csscomplete#completecss
    autocmd vimrc filetype html,markdown setlocal omnifunc=htmlcomplete#completetags
    autocmd vimrc filetype javascript    setlocal omnifunc=javascriptcomplete#completejs
    autocmd vimrc filetype python        setlocal omnifunc=pythoncomplete#complete
    autocmd vimrc filetype xml           setlocal omnifunc=xmlcomplete#completetags
    autocmd vimrc filetype cs            setlocal omnifunc=omnisharp#complete

    let g:neocomplete#force_overwrite_completefunc=1

    " enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
        let g:neocomplete#sources#omni#input_patterns = {}
    endif
    let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
    let g:neocomplete#sources#omni#input_patterns.c   = '[^.[:digit:] *\t]\%(\.\|->\)'
    let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
    let g:neocomplete#sources#omni#input_patterns.cs  = '.*[^=\);]'

    " plugin key-mappings.
    inoremap <expr><c-g>     neocomplete#undo_completion()
    inoremap <expr><c-l>     neocomplete#complete_common_string()

    " recommended key-mappings.
    " <cr>: close popup and save indent.
    inoremap <silent> <cr> <c-r>=<sid>my_cr_function()<cr>
    function! s:my_cr_function()
        return neocomplete#close_popup() . "\<cr>"
        " for no inserting <cr> key.
        "return pumvisible() ? neocomplete#close_popup() : "\<cr>"
    endfunction
    " <tab>: completion.
    inoremap <expr><tab>  pumvisible() ? "\<c-n>" : "\<tab>"
    " <c-h>, <bs>: close popup and delete backword char.
    inoremap <expr><c-h> neocomplete#smart_close_popup()."\<c-h>"
    inoremap <expr><bs> neocomplete#smart_close_popup()."\<c-h>"
    inoremap <expr><c-y>  neocomplete#close_popup()
    inoremap <expr><c-e>  neocomplete#cancel_popup()

    let g:neocomplete#sources#dictionary#dictionaries = {
        \   'ruby': $HOME . '/Dicts/dicts/ruby.dict',
        \ }

''' # }}}

[[plugins]]
repo = 'Shougo/vimproc.vim' # {{{
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
''' # }}}

[[plugins]]
repo = 'Shougo/neosnippet' # {{{
hook_add = '''

    " key_mappings {{{
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)
    "}}}

'''
# }}}

[[plugins]]
repo = 'Shougo/neosnippet-snippets'# {{{
# }}}

[[plugins]]
repo = 'Shougo/vimshell.vim' # {{{
if = '''0'''
hook_add = '''

    let g:vimshell_prompt_expr = 'getcwd()." > "'
    let g:vimshell_prompt_pattern = '^\f\+ > '

    " key_mappings {{{
    nnoremap <SID>[shell] <Nop>
    nmap     <SID>[plugin]s <SID>[shell]
    nnoremap <SID>[shell]s  :<C-e><C-u>set<space>noautochdir<CR>:<C-e><C-u>VimShell<CR>
    nnoremap <SID>[shell]n  :<C-e><C-u>set<space>noautochdir<CR>:<C-e><C-u>VimShellPop<CR>
    nnoremap <SID>[shell]p  :<C-e><C-u>set<space>noautochdir<CR>:<C-e><C-u>VimShellInteractive python<CR>
    nnoremap <SID>[shell]r  :<C-e><C-u>set<space>noautochdir<CR>:<C-e><C-u>VimShellInteractive irb<CR>
    "}}}

'''
# }}}

[[plugins]]
repo = 'kana/vim-smartchr' # {{{
hook_add = '''

        let filetype = [
            \    'vim',
            \    'ruby',
            \    'python',
            \    'c',
            \    'cpp',
            \    'cs',
            \    'toml',
            \    ]
        "for all languages {{{
        let lst = [
            \    ['<',     "smartchr#loop(' < ', ' << ', '<')"],
            \    ['>',     "smartchr#loop(' > ', ' >> ', '>')"],
            \    ['+',     "smartchr#loop(' + ', ' ++ ', '+')"],
            \    ['-',     "smartchr#loop(' - ', ' -- ', '-')"],
            \    ['/',     "smartchr#loop(' / ', ' // ', '/')"],
            \    ['&',     "smartchr#loop(' & ', ' && ', '&')"],
            \    ['<Bar>', "smartchr#loop(' | ', ' || ', '|')"],
            \    ['%',     "smartchr#loop(' % ', '%'        )"],
            \    ['*',     "smartchr#loop(' * ', '*'        )"],
            \    [',',     "smartchr#loop(', ' , ','        )"]
            \    ]

        call submode#enter_with('default', 'i', '', '<C-z>', '<Nop>')
        for i in lst
            call submode#map('default', 'i', '', i[0], i[0])
            call smartinput#map_to_trigger('i', i[0], i[0], i[0])
            call smartinput#define_rule({
                \    'char' : i[0],
                \    'at'   : '\%#',
                \    'input': '<C-R>=' . i[1] . '<CR>',
                \    'filetype' : filetype,
                \    })

            call smartinput#define_rule({
                \    'char' : i[0],
                \    'at' : '^\([^"]*"[^"]*"\)*[^"]*"[^"]*\%#',
                \    'input' : i[0],
                \    'filetype' : filetype,
                \    })

            call smartinput#define_rule({
                \    'char' : i[0],
                \    'at' : '^\([^'']*''[^'']*''\)*[^'']*''[^'']*\%#',
                \    'input' : i[0],
                \    'filetype' : filetype,
                \    })
        endfor

        call smartinput#map_to_trigger('i', '<Space>', '<Space>', '<Space>')
        call smartinput#define_rule({
            \   'at'    : '(\%#)',
            \   'char'  : '<Space>',
            \   'input' : '<Space><Space><Left>',
            \    'filetype' : filetype,
            \   })

        call smartinput#define_rule({
            \   'at'    : '( \%# )',
            \   'char'  : '<BS>',
            \   'input' : '<Del><BS>',
            \   'filetype' : filetype,
            \   })

        call smartinput#define_rule({
            \   'at': '\s\+\%#',
            \   'char': '<CR>',
            \   'input': "<C-o>:call setline('.', substitute(getline('.'), '\\s\\+$', '', ''))<CR><CR>",
            \   'filetype' : filetype,
            \   })

        call smartinput#map_to_trigger('i', '=', '=', '=')
        call smartinput#define_rule({
            \    'char' : '=',
            \    'at' : '\%#',
            \    'input' : "<C-R>=smartchr#loop(' = ', ' == ', '=')<CR>",
            \    'filetype' : filetype,
            \    })
        call smartinput#define_rule({
            \    'char' : '=',
            \    'at' : '[&+-/<>|] \%#',
            \    'input' : '<BS>= ',
            \    'filetype' : filetype,
            \    })
        call smartinput#define_rule({
            \    'char' : '=',
            \    'at' : '!\%#',
            \    'input' : '= ',
            \    'filetype' : filetype,
            \    })
        call smartinput#define_rule({
            \    'char' : '=',
            \    'at' : '^\([^"]*"[^"]*"\)*[^"]*"[^"]*\%#',
            \    'input' : '=',
            \    'filetype' : filetype,
            \    })
        call smartinput#define_rule({
            \    'char' : '=',
            \    'at' : '^\([^'']*''[^'']*''\)*[^'']*''[^'']*\%#',
            \    'input' : '=',
            \    'filetype' : filetype,
            \    })

        for op in ['<', '>', '+', '-', '/', '&', '%', '\*', '|']
            call smartinput#define_rule({
                \    'char' : '<BS>',
                \    'at' : ' ' . op . ' \%#',
                \    'input' : '<BS><BS><BS>',
                \    'filetype' : filetype,
                \    })
        endfor

        " }}}

        let filetype = [
            \    'ruby',
            \    ]
        " for ruby {{{
        for i in lst
            call smartinput#define_rule({
                \    'char' : i[0],
                \    'at' : '^\([^\\]*\\[^\\]*\\\)*[^\\]*\\[^\\]*\%#',
                \    'input' : i[0],
                \    'filetype' : filetype
                \    })
        endfor
        " }}}


'''
# }}}

[[plugins]]
repo = 'kana/vim-smartinput'# {{{
# }}}

[[plugins]]
repo = 'thinca/vim-submode' # {{{
hook_add = '''
    let g:submode_timeout = 0
'''
# }}}

[[plugins]]
repo = 'itchyny/lightline.vim' # {{{
hook_add = '''

    let g:lightline = {
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
        \   'left': [
        \     ['mode', 'paste'],
        \     ['fugitive', 'gitgutter', 'filename'],
        \   ],
        \   'right': [
        \     ['lineinfo'],
        \     ['percent'],
        \     ['fileformat', 'fileencoding', 'filetype'],
        \   ]
        \ },
        \ 'component_function': {
        \   'modified': 'MyModified',
        \   'time': 'MyTime',
        \   'readonly': 'MyReadonly',
        \   'fugitive': 'MyFugitive',
        \   'filename': 'MyFilename',
        \   'fileformat': 'MyFileformat',
        \   'filetype': 'MyFiletype',
        \   'fileencoding': 'MyFileencoding',
        \   'mode': 'MyMode',
        \   'syntastic': 'SyntasticStatuslineFlag',
        \   'charcode': 'MyCharCode',
        \   'gitgutter': 'MyGitGutter',
        \ },
        \ 'separator': {'left': '', 'right': ''},
        \ 'subseparator': {'left': '|', 'right': '|'}
        \ }

    function! MyModified() "{{{
        return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
    endfunction "}}}

    function! MyTime() "{{{
        return winwidth('.') > 110 ? strftime("%Y/%m/%d %H:%M:%S", localtime()) : (winwidth('.') > 90 ? strftime("%Y/%m/%d", localtime()) : '')
    endfunction "}}}

    function! MyReadonly() "{{{
        return &ft !~? 'help\|vimfiler\|gundo' && &ro ? '-' : ''
    endfunction "}}}

    function! MyFilename() "{{{
        return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
            \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
            \  &ft == 'unite' ? unite#get_status_string() :
            \  &ft == 'vimshell' ? substitute(b:vimshell.current_dir,expand('~'),'~','') :
            \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
            \ ('' != MyModified() ? ' ' . MyModified() : '')
    endfunction "}}}

    function! MyFugitive() "{{{
        try
            if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
                let _ = fugitive#head()
                return strlen(_) ? _ : ''
            endif

        catch
        endtry
        return ''
    endfunction "}}}

    function! MyFileformat() "{{{
        return winwidth('.') > 70 ? &fileformat : ''
    endfunction "}}}

    function! MyFiletype() "{{{
        return winwidth('.') > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
    endfunction "}}}

    function! MyFileencoding() "{{{
        return winwidth('.') > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
    endfunction "}}}

    function! MyMode() "{{{
        return winwidth('.') > 60 ? lightline#mode() : ''
    endfunction "}}}

    function! MyGitGutter() "{{{
        if ! exists('*GitGutterGetHunkSummary')
            \ || ! get(g:, 'gitgutter_enabled', 0)
            \ || winwidth('.') <= 90
            return ''
        endif
        let symbols = [
            \  g:gitgutter_sign_added,
            \  g:gitgutter_sign_modified,
            \  g:gitgutter_sign_removed
            \ ]
        let hunks = GitGutterGetHunkSummary()
        let ret = []
        for i in [0, 1, 2]
            if hunks[i] > 0
                call add(ret, symbols[i] . hunks[i])
            endif
        endfor
        return join(ret, ' ')
    endfunction "}}}

    function! MyCharCode() "{{{
    " https://github.com/Lokaltog/vim-powerline/blob/develop/autoload/Powerline/Functions.vim
        if winwidth('.') <= 70
            return ''
        endif

        " Get the output of :ascii
        redir => ascii
        silent! ascii
        redir END

        if match(ascii, 'NUL') != -1
            return 'NUL'
        endif

        " Zero pad hex values
        let nrformat = '0x%02x'

        let encoding = (&fenc == '' ? &enc : &fenc)

        if encoding == 'utf-8'
            " Zero pad with 4 zeroes in unicode files
            let nrformat = '0x%04x'
        endif

        " Get the character and the numeric value from the return value of :ascii
        " This matches the two first pieces of the return value, e.g.
        " "<F>  70" => char: 'F', nr: '70'
        let [str, char, nr; rest] = matchlist(ascii, '\v\<(.{-1,})\>\s*([0-9]+)')

        " Format the numeric value
        let nr = printf(nrformat, nr)

        return "'". char ."' ". nr
    endfunction "}}}

'''
# }}}

[[plugins]]
repo = 'thinca/vim-quickrun' # {{{
hook_add = '''

    let g:quickrun_config = {
        \   "_" : {
        \       "runner" : "vimproc",
        \       "runner/vimproc/updatetime" : 60
        \   },
        \}

    " key_mappings {{{
    nnoremap <SID>[plugin]r :<C-e><C-u>QuickRun -runner vimproc<CR>
    "}}}

'''
# }}}

[[plugins]]
repo = 'thinca/vim-qfreplace'# {{{
# }}}

[[plugins]]
repo = 'thinca/vim-visualstar'# {{{
# }}}

[[plugins]]
repo = 'rhysd/clever-f.vim'# {{{
# }}}

[[plugins]]
repo = 'tomtom/tcomment_vim' # {{{
hook_add = '''

    " key_mappings {{{
    nmap cc <Plug>TComment_gcc<Esc><Esc>
    vmap cc <Plug>TComment_gcc<Esc><Esc>
    "}}}

'''
# }}}

[[plugins]]
repo = 'junegunn/vim-easy-align' # {{{
hook_add = '''

    " key_mappings {{{
    vmap <Enter> <Plug>(EasyAlign)
    "}}}

'''
# }}}

[[plugins]]
repo = 'tpope/vim-repeat' # {{{
# }}}

[[plugins]]
repo = 'tpope/vim-fugitive' # {{{
hook_add = '''

    " key_mappings {{{
    nnoremap <SID>[git] <Nop>
    nmap     <SID>[plugin]g <SID>[git]
    nnoremap <SID>[git]ad :<C-e><C-u>Gwrite<CR>
    nnoremap <SID>[git]bl :<C-e><C-u>Gblame<CR>
    nnoremap <SID>[git]br :<C-e><C-u>Git branch<Space>
    nnoremap <SID>[git]ch :<C-e><C-u>Git checkout<Space>
    nnoremap <SID>[git]cm :<C-e><C-u>Gcommit -m ""<LEFT>
    nnoremap <SID>[git]ca :<C-e><C-u>Gcommit -m "add: "<LEFT>
    nnoremap <SID>[git]cr :<C-e><C-u>Gcommit -m "remove: "<LEFT>
    nnoremap <SID>[git]cf :<C-e><C-u>Gcommit -m "fix: "<LEFT>
    nnoremap <SID>[git]cc :<C-e><C-u>Gcommit -m "change: "<LEFT>
    nnoremap <SID>[git]co :<C-e><C-u>Gcommit<CR>
    nnoremap <SID>[git]di :<C-e><C-u>Gdiff<CR>
    nnoremap <SID>[git]me :<C-e><C-u>Git merge<Space>
    nnoremap <SID>[git]pl :<C-e><C-u>Git pull<CR>
    nnoremap <SID>[git]ps :<C-e><C-u>Git push<CR>
    nnoremap <SID>[git]sh :<C-e><C-u>Git stash<CR>
    nnoremap <SID>[git]st :<C-e><C-u>Gstatus<CR>
    "}}}

'''
# }}}

[[plugins]]
repo = 'kien/rainbow_parentheses.vim' # {{{
hook_add = '''

    " color
    let g:rbpt_colorpairs = [
        \ ['brown',       'RoyalBlue3'],
        \ ['Darkblue',    'SeaGreen3'],
        \ ['darkgray',    'DarkOrchid3'],
        \ ['darkgreen',   'firebrick3'],
        \ ['darkcyan',    'RoyalBlue3'],
        \ ['darkred',     'SeaGreen3'],
        \ ['darkmagenta', 'DarkOrchid3'],
        \ ['brown',       'firebrick3'],
        \ ['gray',        'RoyalBlue3'],
        \ ['black',       'SeaGreen3'],
        \ ['darkmagenta', 'DarkOrchid3'],
        \ ['Darkblue',    'firebrick3'],
        \ ['darkgreen',   'RoyalBlue3'],
        \ ['darkcyan',    'SeaGreen3'],
        \ ['darkred',     'DarkOrchid3'],
        \ ['red',         'firebrick3'],
        \ ]

    let g:rbpt_max            = 16
    let g:rbpt_loadcmd_toggle = 0

    autocmd vimrc ColorScheme * RainbowParenthesesToggle
    autocmd vimrc ColorScheme * RainbowParenthesesLoadRound
    autocmd vimrc ColorScheme * RainbowParenthesesLoadSquare
    autocmd vimrc ColorScheme * RainbowParenthesesLoadBraces
    autocmd vimrc ColorScheme * RainbowParenthesesLoadChevrons

'''
# }}}

[[plugins]]
repo = 'LeafCage/yankround.vim' # {{{
hook_add = '''

    let g:yankround_max_history = 100

    " key_mappings {{{
    nmap p     <Plug>(yankround-p)
    nmap P     <Plug>(yankround-P)
    nmap <C-p> <Plug>(yankround-prev)
    nmap <C-n> <Plug>(yankround-next)
    "}}}

'''
# }}}

[[plugins]]
repo = 'thinca/vim-fontzoom' # {{{
if = '''has('gui')'''
hook_add = '''

    " key_mappings {{{
    nmap <RIGHT> <Plug>(fontzoom-larger)
    nmap <LEFT>  <Plug>(fontzoom-smaller)
    "}}}

'''
# }}}

[[plugins]]
repo = 'AndrewRadev/switch.vim' # {{{
hook_add = '''

    " key_mappings {{{
    nnoremap <silent>- :<C-e><C-u>Switch<CR>
    "}}}

'''
# }}}

[[plugins]]
repo = 't9md/vim-quickhl' # {{{
hook_add = '''

    " key_mappings {{{
    nmap { <Plug>(quickhl-manual-this)
    xmap { <Plug>(quickhl-manual-this)
    nmap } <Plug>(quickhl-manual-reset)
    xmap } <Plug>(quickhl-manual-reset)
    "}}}

'''
# }}}

[[plugins]]
repo = 'airblade/vim-gitgutter' # {{{
hook_add = '''

    let g:gitgutter_map_keys                = 0
    let g:gitgutter_sign_added              = '✚ '
    let g:gitgutter_sign_modified           = '➜ '
    let g:gitgutter_sign_removed            = '✘ '
    let g:gitgutter_sign_removed_first_line = '✘ '
    let g:gitgutter_sign_modified_removed   = '✘➜'

    " key_mappings {{{
    nnoremap <silent><SID>[git]gt   :<C-e><C-u>GitGutterToggle<CR>
    nnoremap <silent><SID>[git]gh   :<C-e><C-u>GitGutterLineHighlightsToggle<CR>
    nnoremap <silent><SID>[git]hn   :<C-e><C-u>GitGutterNextHunk<CR>
    nnoremap <silent><SID>[git]hp   :<C-e><C-u>GitGutterPrevHunk<CR>
    nnoremap <silent><SID>[git]ha   :<C-e><C-u>GitGutterStageHunk<CR>
    nnoremap <silent><SID>[git]hh   :<C-e><C-u>GitGutterRevertHunk<CR>
    nnoremap <silent><SID>[git]hp   :<C-e><C-u>GitGutterPrevHunk<CR>
    nnoremap <silent><SID>[git]hn   :<C-e><C-u>GitGutterNextHunk<CR>
    "}}}

'''
# }}}

[[plugins]]
repo = 'supermomonga/shaberu.vim'# {{{
# }}}

[[plugins]]
repo = 'mattn/unite-advent_calendar'# {{{
# }}}

[[plugins]]
repo = 'tyru/open-browser.vim'# {{{
# }}}

[[plugins]]
repo = 'osyo-manga/vim-anzu' # {{{
if = '''0'''
hook_add = '''
"
    let g:anzu_enable_CursorMoved_AnzuUpdateSearchStatus = 1
    nmap n <Plug>(anzu-mode-n)
    nmap N <Plug>(anzu-mode-N)
    nnoremap <expr> n anzu#mode#mapexpr("n", "", "zzzv")
    nnoremap <expr> N anzu#mode#mapexpr("N", "", "zzzv")

'''
# }}}

[[plugins]]
repo = 'osyo-manga/vim-over' # {{{
if = '''1'''
hook_add = '''

    " key_mappings {{{
    nnoremap <SID>[plugin]/ :<C-e><C-u>OverCommandLine<CR>%s/
    "}}}

'''
# }}}

[[plugins]]
repo = 'mbbill/undotree' # {{{
hook_add = '''

    let g:undotree_SetFocusWhenToggle   = 1
    let g:undotree_WindowLayout         = 'topleft'
    let g:undotree_SplitWidth           = 35
    let g:undotree_diffAutoOpen         = 1
    let g:undotree_diffpanelHeight      = 25
    let g:undotree_RelativeTimestamp    = 1
    let g:undotree_TreeNodeShape        = '*'
    let g:undotree_HighlightChangedText = 1
    let g:undotree_HighlightSyntax      = "UnderLined"

    " key_mappings {{{
    nnoremap <SID>[undotr] <Nop>
    nmap     <SID>[plugin]U <SID>[undotr]
    nnoremap <SID>[undotr]  :<C-e><C-u>UndotreeToggle<CR>
    "}}}

'''
# }}}

[[plugins]]
repo = 'Shougo/vinarise.vim' # {{{
hook_add = '''

    " key_mappings {{{
    nnoremap <SID>[vinarise] <Nop>
    nmap     <SID>[plugin]v <SID>[vinarise]
    nnoremap <SID>[vinarise]v :<C-e><C-u>Vinarise<CR>
    nnoremap <SID>[vinarise]b :<C-e><C-u>VinarisePluginBitmapView<CR>
    "}}}

'''
# }}}

[[plugins]]
repo = 'thinca/vim-ref' # {{{
hook_add = '''

    " key_mappings {{{
    nnoremap <SID>[vim-ref] <Nop>
    nmap     <SID>[plugin]d <SID>[vim-ref]
    nmap     <SID>[vim-ref]d <Plug>(ref-keyword)
    nnoremap <SID>[vim-ref]h :<C-e><C-u>help
    "}}}

'''
# }}}

[[plugins]]
repo = 'ringogirl/unite-w3m'# {{{
if = '''0'''
# }}}

[[plugins]]
repo = 'rhysd/committia.vim'# {{{
# }}}

[[plugins]]
repo = 'thinca/vim-splash'# {{{
if = '''0'''
# }}}

[[plugins]]
repo = 'LeafCage/foldCC.vim' # {{{
hook_add = '''

    set foldtext=FoldCCtext()
    set foldcolumn=3
    set fillchars=vert:\|
    let g:foldCCtext_tail = 'printf("--+  {%4d lines Lv%-2d}", v:foldend-v:foldstart+1, v:foldlevel)'
    let g:foldCCtext_head = '"+-- "'

'''
# }}}

[[plugins]]
repo = 'easymotion/vim-easymotion' # {{{
hook_add = '''

    " let g:EasyMotion_keys       = 'jfurmvhgytnbkdieclsowxapqzJFURMVHGYTNBKDIECLSOWXAPQZ'
    let g:EasyMotion_keys       = 'asdfghjkl'
    let g:EasyMotion_grouping   = 1

    " key_mappings {{{
    nmap m <Plug>(easymotion-prefix)
    nmap f <Plug>(easymotion-overwin-f)
    nmap t <Plug>(easymotion-tl)
    nmap F <Plug>(easymotion-Fl)
    nmap T <Plug>(easymotion-Tl)

    omap m <Plug>(easymotion-prefix)
    omap f <Plug>(easymotion-overwin-f)
    omap t <Plug>(easymotion-tl)
    omap F <Plug>(easymotion-Fl)
    omap T <Plug>(easymotion-Tl)

    "}}}

'''
# }}}

[[plugins]]
repo = 'terryma/vim-expand-region' # {{{
hook_add = '''

    " key_mappings {{{
    vmap v     <Plug>(expand_region_expand)
    vmap <C-v> <Plug>(expand_region_shrink)
    "}}}

'''
# }}}

[[plugins]]
repo = 'haya14busa/incsearch.vim' # {{{
hook_add = '''

    let g:incsearch#magic = '\v'

    " key_mappings {{{
    nmap / <Plug>(incsearch-forward)
    nmap ? <Plug>(incsearch-backward)
    "}}}

'''
# }}}

[[plugins]]
repo = 'scrooloose/syntastic.git' # {{{
if = '''0'''
hook_add = '''

    " let g:syntastic_enable_signs=1
    " let g:syntastic_auto_loc_list=2
    " let g:syntastic_mode_map = {'mode': 'passive'}
    " augroup AutoSyntastic
    "     autocmd!
    "     autocmd InsertLeave,TextChanged * call s:syntastic()
    " augroup END
    " function! s:syntastic()
    "     w
    "     SyntasticCheck
    " endfunction

'''
# }}}

[[plugins]]
repo = 'itchyny/dictionary.vim'# {{{
hook_add = '''
    function! s:dic_under() abort "{{{
        let a:word = matchstr(expand("<cword>"), '[a-z]*', 0)
        exec 'Dictionary ' . a:word
    endfunction "}}}
    command! -nargs=0 DictionaryUnderWord call s:dic_under()
'''
# }}}

[[plugins]]
repo = 'osyo-manga/vim-precious'# {{{
depends = ['context_filetype.vim']
# }}}

[[plugins]]
repo = 'Shougo/context_filetype.vim'# {{{
# }}}

[[plugins]]
repo = 'Yggdroot/indentLine'# {{{
hook_add = '''

    " for tab
    set list listchars=tab:\¦\ 

    " color for vim
    let g:indentLine_color_term = 239

    " color for Gvim
    let g:indentLine_color_gui = '#A4E57E'

    " none X terminal
    let g:indentLine_color_tty_light = 7 " (default: 4)
    let g:indentLine_color_dark = 1 " (default: 2)

    " let g:indentLine_char = 'c'

'''
# }}}

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim' # {{{
hook_add = '''

    nnoremap <SID>[spjoin]  <Nop>
    nmap     <SID>[plugin]s <SID>[spjoin]
    nnoremap <SID>[spjoin]s :<C-e><C-u>SplitjoinSplit<CR>
    nnoremap <SID>[spjoin]j :<C-e><C-u>SplitjoinJoin<CR>

'''
# }}}

[[plugins]]
repo = 'kassio/neoterm' # {{{
if = '''has('nvim')'''
# }}}

# }}}

# textobject {{{

[[plugins]]
repo = 'kana/vim-textobj-user' # {{{
depends = ['kana/vim-textobj-user']
# }}}

[[plugins]]
repo = 'sgur/vim-textobj-parameter' # {{{
depends = ['kana/vim-textobj-user']
# }}}

[[plugins]]
repo = 'kana/vim-textobj-indent' # {{{
depends = ['kana/vim-textobj-user']
# }}}

[[plugins]]
repo = 'kana/vim-textobj-fold' # {{{
depends = ['kana/vim-textobj-user']
# }}}

[[plugins]]
repo = 'kana/vim-textobj-underscore' # {{{
depends = ['kana/vim-textobj-user']
# }}}

[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock' # {{{
depends = ['kana/vim-textobj-user']
# }}}

# }}}

# operator {{{

[[plugins]]
repo = 'kana/vim-operator-user' # {{{
# }}}

[[plugins]]
repo = 'rhysd/vim-operator-surround' # {{{
hook_add = '''

    " key_mappings {{{
    nmap <silent>ys <Plug>(operator-surround-append)
    nmap <silent>ds <Plug>(operator-surround-delete)<Plug>(textobj-multiblock-a)
    nmap <silent>cs <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)
    "}}}

'''
# }}}

[[plugins]]
repo = 'tpope/vim-surround' # {{{
# }}}

[[plugins]]
repo = 'kana/vim-operator-replace' # {{{
hook_add = '''

    " key_mappings {{{
    nmap s <Plug>(operator-replace)
    nmap S <Plug>(operator-replace)$
    "}}}

'''
# }}}

# }}}

# unite {{{

[[plugins]]
repo = 'Shougo/unite.vim'# {{{
hook_add = '''

    let g:unite_source_history_yank_enable      = 1     " Enable history yank
    let g:unite_source_file_mru_limit           = 200   " Maximum number of mru list
    let g:unite_source_file_mru_filename_format = ''    " Maximum number of mru list
    let g:unite_enable_start_insert             = 1     " Start in insert mode
    let g:unite_source_history_yank_enable      = 1

    " key_mappings {{{
    nnoremap <SID>[unite] <Nop>
    nmap     <SID>[plugin]u <SID>[unite]
    nnoremap <SID>[unite]u  :<C-e><C-u>Unite<CR>
    nnoremap <SID>[unite]s  :<C-e><C-u>Unite source<CR>
    nnoremap <SID>[unite]hy :<C-e><C-u>Unite history/yank<CR>
    nnoremap <SID>[unite]he :<C-e><C-u>Unite help<CR>
    nnoremap <SID>[unite]hf :<C-e><C-u>Unite file_mru buffer<CR>
    nnoremap <SID>[unite]b  :<C-e><C-u>Unite buffer<CR>
    nnoremap <SID>[unite]re :<C-e><C-u>Unite -buffer-name=register register<CR>
    nnoremap <SID>[unite]f  :<C-e><C-u>UniteWithBufferDir -buffer-name=files file<CR>
    nnoremap <SID>[unite]qf :<C-e><C-u>Unite -no-quit -direction=botright quickfix<CR>
    nnoremap <SID>[unite]pc :<C-e><C-u>Unite -auto-preview colorscheme<CR>
    nnoremap <SID>[unite]pf :<C-e><C-u>Unite -auto-preview font<CR>
    nnoremap <SID>[unite]pt :<C-e><C-u>Unite -auto-preview transparency<CR>
    nnoremap <SID>[unite]yr :<C-e><C-u>Unite yankround<CR>
    nnoremap <SID>[unite]nb :<C-e><C-u>Unite dein<CR>
    nnoremap <SID>[unite]co :<C-e><C-u>Unite command<CR>
    "}}}

'''
# }}}

[[plugins]]
repo = 'Shougo/neomru.vim' # {{{
depends = ['Shougo/unite.vim']
# }}}

[[plugins]]
repo = 'Shougo/unite-outline' # {{{
depends = ['Shougo/unite.vim']
hook_add = '''

    let g:unite_split_rule = 'botright'

'''
# }}}

[[plugins]]
repo = 'kmnk/vim-unite-giti.git'# {{{
depends = ['Shougo/unite.vim']
# }}}

[[plugins]]
repo = 'ujihisa/unite-colorscheme' # {{{
depends = ['Shougo/unite.vim']
# }}}

[[plugins]]
repo = 'ujihisa/unite-font' # {{{
depends = ['Shougo/unite.vim']
# }}}

[[plugins]]
repo = 'ujihisa/unite-help' # {{{
depends = ['Shougo/unite.vim']
# }}}

[[plugins]]
repo = 'todashuta/unite-transparency' # {{{
depends = ['Shougo/unite.vim']
# }}}

[[plugins]]
repo = 'osyo-manga/unite-quickfix.git' # {{{
depends = ['Shougo/unite.vim']
# }}}

[[plugins]]
repo = 'LeafCage/unite-gvimrgb' # {{{
depends = ['Shougo/unite.vim']
# }}}

[[plugins]]
repo = 'LeafCage/unite-recording' # {{{
depends = ['Shougo/unite.vim']
# }}}

[[plugins]]
repo = 'kmnk/vim-unite-giti' # {{{
if = '''1'''
depends = ['Shougo/unite.vim']
hook_add = '''

    let g:unite_split_rule = 'botright'

    " key_mappings {{{
    nnoremap <SID>[unite-git] <Nop>
    nmap     <SID>[unite]g    <SID>[unite-git]
    nnoremap <SID>[unite-git]g :<C-e><C-u>Unite giti<CR>
    " }}}

'''
# }}}

# }}}

# All languages {{{

[[plugins]]
repo = 'mattn/sonictemplate-vim' # {{{
if = '''0'''
# }}}

[[plugins]]
repo = 'tpope/vim-endwise' # {{{
# }}}

[[plugins]]
repo = 'neomake/neomake'# {{{
hook_add = '''

    if has('nvim')
        autocmd vimrc BufWritePost * Neomake
    else
        nnoremap <SID>[plugin]n :<C-e><C-u>Neomake<CR>
    end
    let g:neomake_warning_sign = {
        \ 'text': '!',
        \ 'texthl': 'WarningMsg',
        \ }
    let g:neomake_error_sign = {
        \ 'text': '>',
        \ 'texthl': 'ErrorMsg',
        \ }
'''

# }}}

# }}}

# Java {{{

[[plugins]]
repo = 'vim-scripts/javacomplete' # {{{
on_ft = 'java'
# }}}

[[plugins]]
repo = 'moznion/java_getset.vim' # {{{
on_ft = 'java'
hook_add = '''

    let b:javagetset_enable_K_and_R = 1   " K$R style
    let b:javagetset_add_this       = 1   " add this.

    " key_mappings {{{
    autocmd vimrc Filetype java nnoremap <SID>[plugin]j <SID>[getset]
    autocmd vimrc Filetype java nmap     <buffer><SID>[getset]g <Plug>JavagetsetInsertGetterOnly
    autocmd vimrc Filetype java nmap     <buffer><SID>[getset]s <Plug>JavagetsetInsertSetterOnly
    autocmd vimrc Filetype java nmap     <buffer><SID>[getset]b <Plug>JavagetsetInsertBothGetterSetter
    autocmd vimrc Filetype java vmap     <buffer><SID>[getset]g <Plug>JavagetsetInsertGetterOnly
    autocmd vimrc Filetype java vmap     <buffer><SID>[getset]s <Plug>JavagetsetInsertSetterOnly
    autocmd vimrc Filetype java vmap     <buffer><SID>[getset]b <Plug>JavagetsetInsertBothGetterSetter
    "}}}

'''
# }}}

# }}}

# ruby {{{

[[plugins]]
repo = 'rhysd/unite-ruby-require.vim' # {{{
on_ft = 'ruby'
# }}}

[[plugins]]
repo = 'rhysd/vim-textobj-ruby' # {{{
on_ft = 'ruby'
# }}}

[[plugins]]
repo = 'osyo-manga/vim-monster' # {{{
on_ft = 'ruby'
hook_add = '''
    let g:monster#completion#rcodetools#backend = "async_rct_complete"
    let g:deoplete#sources#omni#input_patterns = {
    \   "ruby" : '[^. *\t]\.\w*\|\h\w*::',
    \}
'''
# }}}

[[plugins]]
repo = 'alpaca-tc/alpaca_tags' # {{{
on_ft = 'ruby'
hook_add = '''
    let g:alpaca_tags#config = {
           \ '_' : '-R --sort=yes --languages=+Ruby --languages=-js,JavaScript',
           \ 'js' : '--languages=+js',
           \ '-js' : '--languages=-js,JavaScript',
           \ 'vim' : '--languages=+Vim,vim',
           \ 'php' : '--languages=+php',
           \ '-vim' : '--languages=-Vim,vim',
           \ '-style': '--languages=-css,scss,js,JavaScript,html',
           \ 'scss' : '--languages=+scss --languages=-css',
           \ 'css' : '--languages=+css',
           \ 'java' : '--languages=+java $JAVA_HOME/src',
           \ 'ruby': '--languages=+Ruby',
           \ 'coffee': '--languages=+coffee',
           \ '-coffee': '--languages=-coffee',
           \ 'bundle': '--languages=+Ruby',
           \ }
'''
# }}}

[[plugins]]
repo = 'rhysd/unite-ruby-require.vim' # {{{
on_ft = 'ruby'
depends = ['unite.vim']
hook_add = '''

    let g:unite_source_ruby_require_cmd = expand('$HOME/.rbenv/shims/ruby')

    " key_mappings {{{
    nnoremap <SID>[unite]rb  :<C-e><C-u>Unite<CR>
    "}}}

'''
# }}}

# }}}

# python {{{

[[plugins]]
repo = 'davidhalter/jedi-vim'# {{{
on_ft = 'python'
hook_add = '''
    let g:jedi#goto_command             = ""
    let g:jedi#goto_assignments_command = ""
    let g:jedi#goto_definitions_command = ""
    let g:jedi#documentation_command    = "<SID>[func]d"
    let g:jedi#usages_command           = ""
    let g:jedi#rename_command           = ""
'''
# }}}

[[plugins]]
repo = 'zchee/deoplete-jedi' #{{{
on_ft = 'python'
hook_add = '''

let g:jedi#auto_initialization = 1
let g:jedi#rename_command      = ""
let g:jedi#popup_on_dot        = 1

'''
# }}}

# }}}

# Swift {{{

[[plugins]]
repo = 'keith/swift.vim' # {{{
on_ft = 'swift'
# }}}

# }}}

# Csharp {{{

[[plugins]]
repo = 'tpope/vim-dispatch' # {{{
on_ft = 'cpp'
# }}}

[[plugins]]
repo = 'OrangeT/vim-csharp' # {{{
on_ft = 'cpp'
# }}}

[[plugins]]
repo = 'osyo-manga/vim-stargate' # {{{
on_ft = 'cpp'
# }}}

# }}}

# Go {{{

[[plugins]]
repo = 'fatih/vim-go' # {{{
on_ft = 'go'
hook_add = '''


    let g:go_def_mapping_enabled = 0
    let g:go_doc_keywordprg_enabled = 0

    " key_mappings {{{
    autocmd vimrc filetype go Nnoremap <SID>[plugin]go <SID>[go]
    autocmd vimrc filetype go nmap     <SID>[go]r      <Plug>(go-run)
    autocmd vimrc FileType go nmap     <SID>[go]b      <Plug>(go-build)
    autocmd vimrc FileType go nmap     <SID>[go]t      <Plug>(go-test)
    autocmd vimrc FileType go nmap     <SID>[go]c      <Plug>(go-coverage)
    "}}}

'''
# }}}

# }}}

# Vim script {{{

[[plugins]]
repo = 'mopp/layoutplugin.vim' # {{{
# }}}

# }}}

# applescript {{{

[[plugins]]
repo = 'vim-scripts/applescript.vim' # {{{
on_ft = 'applescript'
# }}}

# }}}

# toml {{{

[[plugins]]
repo = 'cespare/vim-toml' # {{{
# }}}

# }}}

# tex {{{

[[plugins]]
repo = 'xuhdev/vim-latex-live-preview' # {{{
# }}}

# }}}

# colorscheme {{{

[[plugins]]
repo = 'rhysd/try-colorscheme.vim' # {{{
# }}}

[[plugins]]
repo = 'w0ng/vim-hybrid' # {{{
# }}}

[[plugins]]
repo = 'nanotech/jellybeans.vim' # {{{
# }}}

[[plugins]]
repo = 'altercation/vim-colors-solarized' # {{{
# }}}

[[plugins]]
repo = 'morhetz/gruvbox' # {{{
hook_add = '''
  set background=dark
  autocmd vimrc VimEnter * nested colorscheme gruvbox
'''
# }}}

[[plugins]]
repo = 'buttercream.vim' # {{{
# }}}

[[plugins]]
repo = 'tomasr/molokai' # {{{
# }}}

[[plugins]]
repo = 'vim-scripts/twilight' # {{{
# }}}

[[plugins]]
repo = 'jonathanfilip/vim-lucius' # {{{
# }}}

[[plugins]]
repo = 'jpo/vim-railscasts-theme' # {{{
# }}}

[[plugins]]
repo = 'vim-scripts/Wombat' # {{{
# }}}

[[plugins]]
repo = 'vim-scripts/rdark' # {{{
# }}}

[[plugins]]
repo = 'vim-scripts/newspaper.vim' # {{{
# }}}

[[plugins]]
repo = 'chriskempson/vim-tomorrow-theme' # {{{
# }}}

[[plugins]]
repo = 'whatyouhide/vim-gotham' # {{{
# }}}

[[plugins]]
repo = 'joshdick/onedark.vim' # {{{
if = '''0'''
hook_add = '''
  set background=dark
  autocmd vimrc VimEnter * nested colorscheme onedark
'''
# }}}

# }}}

# tools {{{

[[plugins]]
repo = 'mattn/webapi-vim' # {{{
# }}}

[[plugins]]
repo = 'ujihisa/neco-look' # {{{
# }}}

[[plugins]]
repo = 'mitsuse/kompl' # {{{
# }}}

# }}}

