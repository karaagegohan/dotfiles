[[plugins]]
repo = 'Shougo/dein.vim'# {{{
hook_add = '''

    nnoremap <SID>[plugin]      <Nop>
    nmap     <Space>            <SID>[plugin]

'''
# }}}

[[plugins]]
repo = 'Shougo/deoplete.nvim' # {{{
if = '''has('nvim')'''
hook_add = '''
    let g:deoplete#enable_at_startup = 1
'''
# }}}

[[plugins]]
repo = 'Shougo/neocomplete.vim' # {{{
if = '''has('lua')'''
hook_add = '''

    let g:neocomplete#enable_at_startup                 = 1         " use neocomplete.
    let g:neocomplete#enable_smart_case                 = 1         " use smartcase.
    let g:neocomplete#enable_camel_case                 = 1         " use camelcase.
    let g:neocomplete#enable_fuzzy_completion           = 1         " use fuzzy completion.
    let g:neocomplete#use_vimproc                       = 1
    let g:neocomplete#lock_iminsert                     = 1         "
    let g:neocomplete#sources#syntax#min_keyword_length = 2
    let g:neocomplete#lock_buffer_name_pattern          = '\*ku\*'  " file name to lock buffer

    " define dictionary.
    let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : '',
        \ 'vimshell' : $home.'/.vimshell_hist',
        \ 'scheme' : $home.'/.gosh_completions'
        \ }

    " define keyword.
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    " enable omni completion.
    autocmd vimrc filetype css           setlocal omnifunc=csscomplete#completecss
    autocmd vimrc filetype html,markdown setlocal omnifunc=htmlcomplete#completetags
    autocmd vimrc filetype javascript    setlocal omnifunc=javascriptcomplete#completejs
    autocmd vimrc filetype python        setlocal omnifunc=pythoncomplete#complete
    autocmd vimrc filetype xml           setlocal omnifunc=xmlcomplete#completetags
    autocmd vimrc filetype cs            setlocal omnifunc=omnisharp#complete

    let g:neocomplete#force_overwrite_completefunc=1

    " enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
        let g:neocomplete#sources#omni#input_patterns = {}
    endif
    let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
    let g:neocomplete#sources#omni#input_patterns.c   = '[^.[:digit:] *\t]\%(\.\|->\)'
    let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
    let g:neocomplete#sources#omni#input_patterns.cs  = '.*[^=\);]'

    " plugin key-mappings.
    inoremap <expr><c-g>     neocomplete#undo_completion()
    inoremap <expr><c-l>     neocomplete#complete_common_string()

    " recommended key-mappings.
    " <cr>: close popup and save indent.
    inoremap <silent> <cr> <c-r>=<sid>my_cr_function()<cr>
    function! s:my_cr_function()
        return neocomplete#close_popup() . "\<cr>"
        " for no inserting <cr> key.
        "return pumvisible() ? neocomplete#close_popup() : "\<cr>"
    endfunction
    " <tab>: completion.
    inoremap <expr><tab>  pumvisible() ? "\<c-n>" : "\<tab>"
    " <c-h>, <bs>: close popup and delete backword char.
    inoremap <expr><c-h> neocomplete#smart_close_popup()."\<c-h>"
    inoremap <expr><bs> neocomplete#smart_close_popup()."\<c-h>"
    inoremap <expr><c-y>  neocomplete#close_popup()
    inoremap <expr><c-e>  neocomplete#cancel_popup()

    let g:neocomplete#sources#dictionary#dictionaries = {
        \   'ruby': $HOME . '/Dicts/dicts/ruby.dict',
        \ }

''' # }}}

[[plugins]]
repo = 'Shougo/vimproc.vim' # {{{
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
''' # }}}

[[plugins]]
repo = 'Shougo/deol.nvim' # {{{
if = '''has('nvim')'''
hook_add = '''

'''
# }}}

[[plugins]]
repo = 'Shougo/denite.nvim' # {{{
if = '''has('nvim')'''
hook_add = '''

'''
# }}}

[[plugins]]
repo = 'Shougo/neosnippet' # {{{
hook_add = '''

    " key_mappings {{{
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)
    "}}}

'''
# }}}

[[plugins]]
repo = 'Shougo/neosnippet-snippets'# {{{
# }}}

[[plugins]]
repo = 'Shougo/vimshell.vim' # {{{
if = '''0'''
hook_add = '''

    let g:vimshell_prompt_expr = 'getcwd()." > "'
    let g:vimshell_prompt_pattern = '^\f\+ > '

    " key_mappings {{{
    nnoremap <SID>[shell]   <Nop>
    nmap     <SID>[plugin]s <SID>[shell]
    nnoremap <SID>[shell]s  :<C-u>set<space>noautochdir<CR>:<C-u>VimShell<CR>
    nnoremap <SID>[shell]n  :<C-u>set<space>noautochdir<CR>:<C-u>VimShellPop<CR>
    nnoremap <SID>[shell]p  :<C-u>set<space>noautochdir<CR>:<C-u>VimShellInteractive python<CR>
    nnoremap <SID>[shell]r  :<C-u>set<space>noautochdir<CR>:<C-u>VimShellInteractive irb<CR>
    "}}}

'''
# }}}

[[plugins]]
repo = 'kana/vim-smartinput'# {{{
# }}}

[[plugins]]
repo = 'thinca/vim-submode' # {{{
hook_add = '''
'''
# }}}

[[plugins]]
repo = 'kana/vim-smartchr' # {{{
depends = ['thinca/vim-submode', 'kana/vim-smartinput']
hook_add = '''

        let filetype = [
            \    'vim',
            \    'ruby',
            \    'python',
            \    'c',
            \    'cpp',
            \    'cs',
            \    'toml',
            \    ]
        "for all languages {{{
        let lst = [
            \    ['<',     "smartchr#loop(' < ', ' << ', '<')"],
            \    ['>',     "smartchr#loop(' > ', ' >> ', '>')"],
            \    ['+',     "smartchr#loop(' + ', ' ++ ', '+')"],
            \    ['-',     "smartchr#loop(' - ', ' -- ', '-')"],
            \    ['/',     "smartchr#loop(' / ', ' // ', '/')"],
            \    ['&',     "smartchr#loop(' & ', ' && ', '&')"],
            \    ['<Bar>', "smartchr#loop(' | ', ' || ', '|')"],
            \    ['%',     "smartchr#loop(' % ', '%'        )"],
            \    ['*',     "smartchr#loop(' * ', '*'        )"],
            \    [',',     "smartchr#loop(', ' , ','        )"]
            \    ]

        call submode#enter_with('default', 'i', '', '<C-z>', '<Nop>')
        for i in lst
            call submode#map('default', 'i', '', i[0], i[0])
            call smartinput#map_to_trigger('i', i[0], i[0], i[0])
            call smartinput#define_rule({
                \    'char' : i[0],
                \    'at'   : '\%#',
                \    'input': '<C-R>=' . i[1] . '<CR>',
                \    'filetype' : filetype,
                \    })

            call smartinput#define_rule({
                \    'char' : i[0],
                \    'at' : '^\([^"]*"[^"]*"\)*[^"]*"[^"]*\%#',
                \    'input' : i[0],
                \    'filetype' : filetype,
                \    })

            call smartinput#define_rule({
                \    'char' : i[0],
                \    'at' : '^\([^'']*''[^'']*''\)*[^'']*''[^'']*\%#',
                \    'input' : i[0],
                \    'filetype' : filetype,
                \    })
        endfor

        call smartinput#map_to_trigger('i', '<Space>', '<Space>', '<Space>')
        call smartinput#define_rule({
            \   'at'    : '(\%#)',
            \   'char'  : '<Space>',
            \   'input' : '<Space><Space><Left>',
            \    'filetype' : filetype,
            \   })

        call smartinput#define_rule({
            \   'at'    : '( \%# )',
            \   'char'  : '<BS>',
            \   'input' : '<Del><BS>',
            \   'filetype' : filetype,
            \   })

        call smartinput#define_rule({
            \   'at': '\s\+\%#',
            \   'char': '<CR>',
            \   'input': "<C-o>:call setline('.', substitute(getline('.'), '\\s\\+$', '', ''))<CR><CR>",
            \   'filetype' : filetype,
            \   })

        call smartinput#map_to_trigger('i', '=', '=', '=')
        call smartinput#define_rule({
            \    'char' : '=',
            \    'at' : '\%#',
            \    'input' : "<C-R>=smartchr#loop(' = ', ' == ', '=')<CR>",
            \    'filetype' : filetype,
            \    })
        call smartinput#define_rule({
            \    'char' : '=',
            \    'at' : '[&+-/<>|] \%#',
            \    'input' : '<BS>= ',
            \    'filetype' : filetype,
            \    })
        call smartinput#define_rule({
            \    'char' : '=',
            \    'at' : '!\%#',
            \    'input' : '= ',
            \    'filetype' : filetype,
            \    })
        call smartinput#define_rule({
            \    'char' : '=',
            \    'at' : '^\([^"]*"[^"]*"\)*[^"]*"[^"]*\%#',
            \    'input' : '=',
            \    'filetype' : filetype,
            \    })
        call smartinput#define_rule({
            \    'char' : '=',
            \    'at' : '^\([^'']*''[^'']*''\)*[^'']*''[^'']*\%#',
            \    'input' : '=',
            \    'filetype' : filetype,
            \    })

        for op in ['<', '>', '+', '-', '/', '&', '%', '\*', '|']
            call smartinput#define_rule({
                \    'char' : '<BS>',
                \    'at' : ' ' . op . ' \%#',
                \    'input' : '<BS><BS><BS>',
                \    'filetype' : filetype,
                \    })
        endfor

        " }}}

        let filetype = [
            \    'ruby',
            \    ]
        " for ruby {{{
        for i in lst
            call smartinput#define_rule({
                \    'char' : i[0],
                \    'at' : '^\([^\\]*\\[^\\]*\\\)*[^\\]*\\[^\\]*\%#',
                \    'input' : i[0],
                \    'filetype' : filetype
                \    })
        endfor
        " }}}


'''
# }}}

[[plugins]]
repo = 'thinca/vim-quickrun' # {{{
hook_add = '''

    let g:quickrun_config = {
        \   "_" : {
        \       "runner" : "vimproc",
        \       "runner/vimproc/updatetime" : 60
        \   },
        \}

    " key_mappings {{{
    nnoremap <SID>[plugin]r :<C-u>QuickRun -runner vimproc<CR>
    "}}}

'''
# }}}

[[plugins]]
repo = 'thinca/vim-qfreplace'# {{{
# }}}

[[plugins]]
repo = 'thinca/vim-visualstar'# {{{
# }}}

[[plugins]]
repo = 'rhysd/clever-f.vim'# {{{
# }}}

[[plugins]]
repo = 'tomtom/tcomment_vim' # {{{
hook_add = '''

    " key_mappings {{{
    nmap cc <Plug>TComment_gcc<Esc><Esc>
    vmap cc <Plug>TComment_gcc<Esc><Esc>
    "}}}

'''
# }}}

[[plugins]]
repo = 'junegunn/vim-easy-align' # {{{
hook_add = '''

    " key_mappings {{{
    vmap <Enter> <Plug>(EasyAlign)
    "}}}

'''
# }}}

[[plugins]]
repo = 'tpope/vim-repeat' # {{{
# }}}

[[plugins]]
repo = 'LeafCage/yankround.vim' # {{{
hook_add = '''

    let g:yankround_max_history = 100

    " key_mappings {{{
    nmap p     <Plug>(yankround-p)
    nmap P     <Plug>(yankround-P)
    nmap <C-p> <Plug>(yankround-prev)
    nmap <C-n> <Plug>(yankround-next)
    "}}}

'''
# }}}

[[plugins]]
repo = 'AndrewRadev/switch.vim' # {{{
hook_add = '''

    " key_mappings {{{
    nnoremap <silent>- :<C-u>Switch<CR>
    "}}}

'''
# }}}

[[plugins]]
repo = 'tyru/open-browser.vim'# {{{
# }}}

[[plugins]]
repo = 'osyo-manga/vim-over' # {{{
hook_add = '''

    " key_mappings {{{
    nnoremap <SID>[plugin]/ :<C-u>OverCommandLine<CR>%s/
    "}}}

'''
# }}}

[[plugins]]
repo = 'mbbill/undotree' # {{{
hook_add = '''

    let g:undotree_SetFocusWhenToggle   = 1
    let g:undotree_WindowLayout         = 'topleft'
    let g:undotree_SplitWidth           = 35
    let g:undotree_diffAutoOpen         = 1
    let g:undotree_diffpanelHeight      = 25
    let g:undotree_RelativeTimestamp    = 1
    let g:undotree_TreeNodeShape        = '*'
    let g:undotree_HighlightChangedText = 1
    let g:undotree_HighlightSyntax      = "UnderLined"

    " key_mappings {{{
    nnoremap <SID>[undotr] <Nop>
    nmap     <SID>[plugin]t <SID>[undotr]
    nnoremap <SID>[undotr]  :<C-u>UndotreeToggle<CR>
    "}}}

'''
# }}}

[[plugins]]
repo = 'Shougo/vinarise.vim' # {{{
hook_add = '''

    " key_mappings {{{
    nnoremap <SID>[vinarise] <Nop>
    nmap     <SID>[plugin]v <SID>[vinarise]
    nnoremap <SID>[vinarise]v :<C-u>Vinarise<CR>
    nnoremap <SID>[vinarise]b :<C-u>VinarisePluginBitmapView<CR>
    "}}}

'''
# }}}

[[plugins]]
repo = 'thinca/vim-ref' # {{{
hook_add = '''

    " key_mappings {{{
    nnoremap <SID>[vim-ref] <Nop>
    nmap     <SID>[plugin]d <SID>[vim-ref]
    nmap     <SID>[vim-ref]d <Plug>(ref-keyword)
    nnoremap <SID>[vim-ref]h :<C-u>help
    "}}}

'''
# }}}

[[plugins]]
repo = 'LeafCage/foldCC.vim' # {{{
hook_add = '''

    set foldtext=FoldCCtext()
    set foldcolumn=3
    set fillchars=vert:\|
    let g:foldCCtext_tail = 'printf("--+  {%4d lines Lv%-2d}", v:foldend-v:foldstart+1, v:foldlevel)'
    let g:foldCCtext_head = '"+-- "'

'''
# }}}

[[plugins]]
repo = 'easymotion/vim-easymotion' # {{{
hook_add = '''

    let g:EasyMotion_keys       = 'asdfghjkl'
    let g:EasyMotion_grouping   = 1

    " key_mappings {{{
    nmap m <Plug>(easymotion-prefix)
    nmap f <Plug>(easymotion-overwin-f)
    nmap t <Plug>(easymotion-tl)
    nmap F <Plug>(easymotion-Fl)
    nmap T <Plug>(easymotion-Tl)

    omap m <Plug>(easymotion-prefix)
    omap f <Plug>(easymotion-overwin-f)
    omap t <Plug>(easymotion-tl)
    omap F <Plug>(easymotion-Fl)
    omap T <Plug>(easymotion-Tl)

    "}}}

'''
# }}}

[[plugins]]
repo = 'terryma/vim-expand-region' # {{{
hook_add = '''

    " key_mappings {{{
    vmap v     <Plug>(expand_region_expand)
    vmap <C-v> <Plug>(expand_region_shrink)
    "}}}

'''
# }}}

[[plugins]]
repo = 'haya14busa/incsearch.vim' # {{{
hook_add = '''

    let g:incsearch#magic = '\v'

    " key_mappings {{{
    nmap / <Plug>(incsearch-forward)
    nmap ? <Plug>(incsearch-backward)
    "}}}

'''
# }}}

[[plugins]]
repo = 'itchyny/dictionary.vim'# {{{
hook_add = '''
    function! s:dic_under() abort "{{{
        let a:word = matchstr(expand("<cword>"), '[a-z]*', 0)
        exec 'Dictionary ' . a:word
    endfunction "}}}
    command! -nargs=0 DictionaryUnderWord call s:dic_under()
'''
# }}}

[[plugins]]
repo = 'osyo-manga/vim-precious'# {{{
depends = ['context_filetype.vim']
# }}}

[[plugins]]
repo = 'Shougo/context_filetype.vim'# {{{
# }}}

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim' # {{{
hook_add = '''

    nnoremap <SID>[spjoin]  <Nop>
    nmap     <SID>[plugin]s <SID>[spjoin]
    nnoremap <SID>[spjoin]s :<C-u>SplitjoinSplit<CR>
    nnoremap <SID>[spjoin]j :<C-u>SplitjoinJoin<CR>

'''
# }}}

[[plugins]]
repo = 'kassio/neoterm' # {{{
if = '''has('nvim')'''
# }}}

[[plugins]]
repo = 'mattn/sonictemplate-vim' # {{{
if = '''0'''
# }}}

[[plugins]]
repo = 'tpope/vim-endwise' # {{{
# }}}

[[plugins]]
repo = 'w0rp/ale'# {{{
hook_add = '''
  let g:ale_statusline_format = ['⨉ %d', '! %d', '']
  let g:ale_sign_error = '⨉'
  let g:ale_sign_warning = '!'
  let g:ale_echo_msg_error_str = 'E'
  let g:ale_echo_msg_warning_str = 'W'
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
'''

# }}}

[[plugins]]
repo = 'mattn/webapi-vim' # {{{
# }}}

[[plugins]]
repo = 'ujihisa/neco-look' # {{{
# }}}

[[plugins]]
repo = 'mitsuse/kompl' # {{{
# }}}

[[plugins]]
repo = 'junegunn/vim-emoji' # {{{
# }}}

[[plugins]]
repo = 'ynoca/restorer.vim' # {{{
hook_source= '''
  let g:restorer#tag = 'null'
'''
# }}}

