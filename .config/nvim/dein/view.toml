[[plugins]]
repo = 'itchyny/lightline.vim' # {{{
hook_add = '''

    let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
        \   'left': [
        \     ['mode'],
        \     ['filename'],
        \     ['fugitive', 'gitgutter', 'ale'],
        \   ],
        \   'right': [
        \     ['lineinfo'],
        \     ['percent'],
        \     ['nextbuffername', 'fileformat', 'fileencoding', 'filetype'],
        \   ]
        \ },
        \ 'component_function': {
        \   'modified'       : 'LightLineModified',
        \   'readonly'       : 'LightLineReadonly',
        \   'fugitive'       : 'LightLineFugitive',
        \   'filename'       : 'LightLineFilename',
        \   'fileformat'     : 'LightLineFileformat',
        \   'filetype'       : 'LightLineFiletype',
        \   'fileencoding'   : 'LightLineFileencoding',
        \   'mode'           : 'LightLineMode',
        \   'charcode'       : 'LightLineCharCode',
        \   'gitgutter'      : 'LightLineGitGutter',
        \   'nextbuffername' : 'LightLineNextBufferName',
        \   'ale'            : 'LightLineALEGetStatusLine',
        \ },
        \ 'separator': {'left': '', 'right': ''},
        \ 'subseparator': {'left': '|', 'right': '|'}
        \ }

    function! LightLineModified() abort "{{{
        return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
    endfunction "}}}

    function! LightLineReadonly() abort "{{{
        return &ft !~? 'help\|vimfiler\|gundo' && &ro ? '-' : ''
    endfunction "}}}

    function! LightLineFilename() abort "{{{
        return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
            \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
            \  &ft == 'unite' ? unite#get_status_string() :
            \  &ft == 'vimshell' ? substitute(b:vimshell.current_dir,expand('~'),'~','') :
            \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
            \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
    endfunction "}}}

    function! LightLineFugitive() abort "{{{
        try
            if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
                let _ = fugitive#head()
                return strlen(_) ? '' . _ : ''
            endif
        catch
        endtry
        return ''
    endfunction "}}}

    function! LightLineFileformat() abort "{{{
        return winwidth('.') > 70 ? &fileformat : ''
    endfunction "}}}

    function! LightLineFiletype() abort "{{{
        return winwidth('.') > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
    endfunction "}}}

    function! LightLineFileencoding() abort "{{{
        return winwidth('.') > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
    endfunction "}}}

    function! LightLineMode() abort "{{{
        return lightline#mode()
    endfunction "}}}

    function! LightLineGitGutter() abort "{{{
        if ! exists('*GitGutterGetHunkSummary')
            \ || ! get(g:, 'gitgutter_enabled', 0)
            \ || winwidth('.') <= 90
            return ''
        endif
        let symbols = [
            \  g:gitgutter_sign_added,
            \  g:gitgutter_sign_modified,
            \  g:gitgutter_sign_removed
            \ ]
        let hunks = GitGutterGetHunkSummary()
        let ret = []
        for i in [0, 1, 2]
            if hunks[i] > 0
                call add(ret, symbols[i] . hunks[i])
            endif
        endfor
        return join(ret, ' ')
    endfunction "}}}

    function! LightLineCharCode() abort "{{{
    " https://github.com/Lokaltog/vim-powerline/blob/develop/autoload/Powerline/Functions.vim
        if winwidth('.') <= 70
            return ''
        endif

        " Get the output of :ascii
        redir => ascii
        silent! ascii
        redir END

        if match(ascii, 'NUL') != -1
            return 'NUL'
        endif

        " Zero pad hex values
        let nrformat = '0x%02x'

        let encoding = (&fenc == '' ? &enc : &fenc)

        if encoding == 'utf-8'
            " Zero pad with 4 zeroes in unicode files
            let nrformat = '0x%04x'
        endif

        " Get the character and the numeric value from the return value of :ascii
        " This matches the two first pieces of the return value, e.g.
        " "<F>  70" => char: 'F', nr: '70'
        let [str, char, nr; rest] = matchlist(ascii, '\v\<(.{-1,})\>\s*([0-9]+)')

        " Format the numeric value
        let nr = printf(nrformat, nr)

        return "'". char ."' ". nr
    endfunction "}}}

    function! LightLineNextBufferName() abort "{{{
      function! s:file_pass_filter(files)
        let l:ret = []
        for l:file  in a:files
          if !isdirectory(l:file)
            call add(l:ret, l:file)
          endif
        endfor
        return l:ret
      endfunction
      let l:current_file = expand('%:p') 
      let l:files = s:file_pass_filter(split(glob(expand('%:p:h') . "/*"), "\n"))
      if len(l:files) <= 1
        return ""
      endif
      let l:cnt = match(l:files, l:current_file)
      let l:next = fnamemodify(l:files[(l:cnt + 1) % len(l:files)], ":t")
      let l:prev = fnamemodify(l:files[(l:cnt - 1) % len(l:files)], ":t")
      let l:return =  l:next . " : " . l:prev"
      return winwidth('.') > 100 ? l:return : ''
    endfunction "}}}

    function! LightLineALEGetStatusLine() abort "{{{
      let l:return = has('nvim') ? ALEGetStatusLine() : ''
      return winwidth('.') > 70 ? l:return : ''
    endfunction "}}}

'''
# }}}

[[plugins]]
repo = 'thinca/vim-fontzoom' # {{{
if = '''has('gui')'''
hook_add = '''

    " key_mappings {{{
    nmap <RIGHT> <Plug>(fontzoom-larger)
    nmap <LEFT>  <Plug>(fontzoom-smaller)
    "}}}

'''
# }}}

[[plugins]]
repo = 'Yggdroot/indentLine'# {{{
hook_add = '''

    " for tab
    set list listchars=tab:\Â¦\ 

    " color for vim
    let g:indentLine_color_term = 239

    " color for Gvim
    let g:indentLine_color_gui = '#A4E57E'

    " none X terminal
    let g:indentLine_color_tty_light = 7 " (default: 4)
    let g:indentLine_color_dark = 1 " (default: 2)

    " let g:indentLine_char = 'c'

'''
# }}}

